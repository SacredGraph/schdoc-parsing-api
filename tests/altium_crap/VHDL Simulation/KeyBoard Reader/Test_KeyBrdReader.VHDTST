------------------------------------------------------------
-- VHDL Testbench for KeyBrdReader
-- 2004 1 28 15 42 29
-- Created by "EditVHDL"
-- "Copyright (c) 2002 Altium Limited"
------------------------------------------------------------

-- Run to 600 ns

Library IEEE;
Use     IEEE.std_logic_1164.all;
Use     IEEE.std_logic_textio.all;
Use     STD.textio.all;
library KeyBrdReader;
use KeyBrdReader.all;
------------------------------------------------------------

------------------------------------------------------------
entity TestKeyBoardReader is
end TestKeyBoardReader;
------------------------------------------------------------

------------------------------------------------------------
architecture stimulus of TestKeyBoardReader is
    file RESULTS: TEXT open WRITE_MODE is "results.txt";
    procedure WRITE_RESULTS(
        A          : std_logic;
        B          : std_logic;
        C          : std_logic;
        D          : std_logic;
        DATAIN     : std_logic_vector(7 downto 0);
        DOWN_ARROW : std_logic;
        E          : std_logic;
        FIVE       : std_logic;
        FOUR       : std_logic;
        INT        : std_logic;
        LEFT_ARROW : std_logic;
        ONE        : std_logic;
        RIGHT_ARROW  : std_logic;
        THREE        : std_logic;
        TWO          : std_logic;
        UP_ARROW     : std_logic
    ) is
        variable l_out : line;
    begin
        write(l_out, now, right, 15);
        write(l_out, A, right, 2);
        write(l_out, B, right, 2);
        write(l_out, C, right, 2);
        write(l_out, D, right, 2);
        write(l_out, DATAIN, right, 9);
        write(l_out, DOWN_ARROW, right, 2);
        write(l_out, E, right, 2);
        write(l_out, FIVE, right, 2);
        write(l_out, FOUR, right, 2);
        write(l_out, INT, right, 2);
        write(l_out, LEFT_ARROW, right, 2);
        write(l_out, ONE, right, 2);
        write(l_out, RIGHT_ARROW, right, 2);
        write(l_out, THREE, right, 2);
        write(l_out, TWO, right, 2);
        write(l_out, UP_ARROW, right, 2);
        writeline(RESULTS, l_out);
    end procedure;

    component KeyBrdReader
        port (
            A               : out std_logic;
            B               : out std_logic;
            C               : out std_logic;
            D               : out std_logic;
            DATAIN          : in std_logic_vector(7 downto 0);
            DOWN_ARROW      : out std_logic;
            E               : out std_logic;
            FIVE            : out std_logic;
            FOUR            : out std_logic;
            INT             : in std_logic;
            LEFT_ARROW      : out std_logic;
            ONE             : out std_logic;
            RIGHT_ARROW     : out std_logic;
            THREE           : out std_logic;
            TWO             : out std_logic;
            UP_ARROW        : out std_logic
        );
    end component;

    signal A: std_logic;
    signal B: std_logic;
    signal C: std_logic;
    signal D: std_logic;
    signal DATAIN: std_logic_vector(7 downto 0);
    signal DOWN_ARROW: std_logic;
    signal E: std_logic;
    signal FIVE: std_logic;
    signal FOUR: std_logic;
    signal INT: std_logic;
    signal LEFT_ARROW: std_logic;
    signal ONE: std_logic;
    signal RIGHT_ARROW: std_logic;
    signal THREE: std_logic;
    signal TWO: std_logic;
    signal UP_ARROW: std_logic;

begin

    DUT:KeyBrdReader port map (
        A              => A,
        B              => B,
        C              => C,
        D              => D,
        DATAIN         => DATAIN,
        DOWN_ARROW     => DOWN_ARROW,
        E              => E,
        FIVE           => FIVE,
        FOUR           => FOUR,
        INT            => INT,
        LEFT_ARROW     => LEFT_ARROW,
        ONE            => ONE,
        RIGHT_ARROW    => RIGHT_ARROW,
        THREE          => THREE,
        TWO            => TWO,
        UP_ARROW       => UP_ARROW
    );

    STIMULUS0:process
    begin
        -- insert stimulus here
       INT<= '1'; DATAIN <= x"75"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test up arrow
       INT<= '1'; DATAIN <= x"72"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test down arrow
       INT<= '1'; DATAIN <= x"74"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test left arrow
       INT<= '1'; DATAIN <= x"6B"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test right arrow
       INT<= '1'; DATAIN <= x"1C"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test A
       INT<= '1'; DATAIN <= x"32"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test B
       INT<= '1'; DATAIN <= x"21"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test C
       INT<= '1'; DATAIN <= x"23"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test D
       INT<= '1'; DATAIN <= x"24"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test E
       INT<= '1'; DATAIN <= x"16"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test 1
       INT<= '1'; DATAIN <= x"1E"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test 2
       INT<= '1'; DATAIN <= x"26"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test 3
       INT<= '1'; DATAIN <= x"25"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test 4
       INT<= '1'; DATAIN <= x"2E"; wait for 20 ns; INT<= '0';wait for 20 ns;  --test 5
        wait;
    end process;

    WRITE_RESULTS(
        A,
        B,
        C,
        D,
        DATAIN,
        DOWN_ARROW,
        E,
        FIVE,
        FOUR,
        INT,
        LEFT_ARROW,
        ONE,
        RIGHT_ARROW,
        THREE,
        TWO,
        UP_ARROW
    );

end architecture;
------------------------------------------------------------

------------------------------------------------------------
